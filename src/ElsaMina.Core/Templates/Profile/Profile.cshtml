@using ElsaMina.Core.Templates.Styling
@using ElsaMina.Core.Utils
@inherits ElsaMina.Core.Templates.LocalizableTemplatePage<ElsaMina.Core.Templates.Profile.ProfileViewModel>

@{
    const string border = $"border: 1px solid {StyleConstants.PRIMARY_BORDER_COLOR};"; 
    
    const string headerStyle = $"{border} padding: 4x; text-align: center; font-style: italic; background-color: {StyleConstants.PRIMARY_BACKGROUND_COLOR};";
    const string avatarCellStyle = $"{border} padding: 0px; width: 80px; text-align: center;";
    const string contentCellStyle = $"{border} padding: 4px 12px; text-align: left; vertical-align: top;";
    const string badgesCellStyle = $"{border} padding: 4px; width: 56px; text-align: center;";
    const string bioCellStyle = $"{border} padding: 4px; text-align: start; background-color: {StyleConstants.PRIMARY_BACKGROUND_COLOR};";
}

<table style="border-collapse: collapse; width: 100%;">
    <thead>
    <tr>
        <th style="@headerStyle">
            Avatar
        </th>
        <th style="@headerStyle">
            Infos
        </th>
        <th style="@headerStyle">
            Badges
        </th>
    </tr>
    </thead>
    <tbody>
    <tr>
        <td style="@avatarCellStyle">
            <img
                width="80"
                height="80"
                src="@Model.Avatar"
                alt="@Model.UserName Avatar" />
        </td>
        <td style="@contentCellStyle">
            &bullet;
            <span
                class="username"
                data-name="@Model.UserId"
                style="font-weight: bold; font-style: italic; padding: 2px; color: @Model.UserId.ToHexColor()">
                @Model.UserName
            </span>
            @{
                var rankNameKey = Model.UserRoomRank switch {
                    '#' => "rank_owner",
                    '*' => "rank_bot",
                    '@' => "rank_mod",
                    '^' => "rank_prizewinner",
                    '%' => "rank_driver",
                    '+' => "rank_voice",
                    'â˜…' => "rank_host",
                    _ => null
                };
            }
            @if (!string.IsNullOrEmpty(rankNameKey))
            {
                <span>(@GetString(rankNameKey))</span>
            }
            <br />
            @if (!string.IsNullOrEmpty(Model.Status))
            {
                <span style="text-decoration: underline">@GetString("profile_status")</span>
                <span>: @Model.Status</span>
                <br />
            }
            @if (Model.RegisterDate > DateTimeOffset.MinValue)
            {
                <span style="text-decoration: underline">@GetString("profile_register_date")</span>
                <span>: @Model.RegisterDate.ToString("d", Model.Culture)</span>
                <br />
            }
            
        </td>
        <td style="@badgesCellStyle">
            @if (Model.Badges != null && Model.Badges.Any())
            {
                @foreach (var badge in Model.Badges)
                {
                    <span>
                        @{ await IncludeAsync("Badge/Badge", badge); }
                    </span>
                }
            }
            else
            {
                <span style="font-style: italic">@GetString("profile_no_badge")</span>
            }
        </td>
    </tr>
    <tr>
        <td
            style="@bioCellStyle"
            colspan="3">
            @if (!string.IsNullOrEmpty(Model.Title)) 
            {
                <span style="text-decoration: underline">@GetString("profile_title")</span>
                <span>: @Model.Title</span>
            }
            else
            {
                <span style="font-style: italic">@GetString("profile_no_title")</span>
            }
        </td>
    </tr>
    </tbody>
</table>
