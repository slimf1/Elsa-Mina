// <auto-generated />
using System;
using ElsaMina.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ElsaMina.DataAccess.Migrations
{
    [DbContext(typeof(BotDbContext))]
    [Migration("20230506210929_AddRoomColumnToAddedCommand")]
    partial class AddRoomColumnToAddedCommand
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("BadgeRoomSpecificUserData", b =>
                {
                    b.Property<string>("BadgeHoldersId")
                        .HasColumnType("TEXT");

                    b.Property<string>("BadgesId")
                        .HasColumnType("TEXT");

                    b.HasKey("BadgeHoldersId", "BadgesId");

                    b.HasIndex("BadgesId");

                    b.ToTable("BadgeHoldings", (string)null);
                });

            modelBuilder.Entity("ElsaMina.DataAccess.Models.AddedCommand", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoomId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Author")
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id", "RoomId");

                    b.ToTable("AddedCommands");
                });

            modelBuilder.Entity("ElsaMina.DataAccess.Models.Badge", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("IsTrophy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Badges");
                });

            modelBuilder.Entity("ElsaMina.DataAccess.Models.RoomParameters", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("IsShowingErrorMessages")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Locale")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("RoomParameters");
                });

            modelBuilder.Entity("ElsaMina.DataAccess.Models.RoomSpecificUserData", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Avatar")
                        .HasColumnType("TEXT");

                    b.Property<long?>("OnTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("UserData");
                });

            modelBuilder.Entity("ElsaMina.DataAccess.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RegDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BadgeRoomSpecificUserData", b =>
                {
                    b.HasOne("ElsaMina.DataAccess.Models.RoomSpecificUserData", null)
                        .WithMany()
                        .HasForeignKey("BadgeHoldersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElsaMina.DataAccess.Models.Badge", null)
                        .WithMany()
                        .HasForeignKey("BadgesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
